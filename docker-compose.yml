services:
  # --- Database Services ---
  postgres_db:
    image: postgres:15-alpine
    container_name: gm_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - narrador_network
    healthcheck:
      # CORRECTED: This check is more robust. It uses the provided user/db
      # to ensure the initialization scripts have run successfully.
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  chromadb:
    image: chromadb/chroma:0.4.24
    container_name: gm_chromadb
    volumes:
      - chroma_data:/chroma/.chroma/
    ports:
      - "8000:8000"
    networks:
      - narrador_network
    restart: unless-stopped
    
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: gm_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - narrador_network
    healthcheck:
      # ADDED: A healthcheck for RabbitMQ to ensure it's ready for connections.
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  # --- Custom Application Services ---
  auth_game_service:
    container_name: gm_auth_game_service
    build:
      context: ./auth_game_service
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    volumes:
      - ./auth_game_service:/app
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        # CORRECTED: Wait for RabbitMQ to be healthy, not just started.
        condition: service_healthy
    networks:
      - narrador_network
    restart: unless-stopped

# ... (solo cambia la secci√≥n del gm_worker)

  gm_worker:
    container_name: gm_worker
    build:
      context: ./gm_worker
      dockerfile: Dockerfile
    # DEFINITIVE CORRECTION: We must use the 'eventlet' pool for I/O-bound concurrency.
    # The 'solo' pool was only for debugging and is blocking.
    command: celery -A app.worker.celery_app worker -P eventlet -Q gm_tasks --concurrency=10 --loglevel=info
    volumes:
      - ./gm_worker:/app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_db:
        condition: service_healthy
      chromadb:
        condition: service_started
    networks:
      - narrador_network
    restart: unless-stopped
networks:
  narrador_network:
    driver: bridge

volumes:
  postgres_data:
  chroma_data: